==============================================================
PROJECT BRIEF: ADVANCED SPORTS STATS & PREDICTIONS PLATFORM
==============================================================

**GOAL:** Develop a live score, statistics, and betting prediction platform (Web and Mobile App) that is functionally superior and more detailed than Scores24.live. The platform must provide deep analysis, proprietary predictions, and comprehensive league coverage.

---
SECTION 1: DATA ACQUISITION (THE ENGINE)
---

The project's foundation is a reliable, low-latency data source. Direct web scraping (non-API) of dynamic sites is forbidden due to maintenance and legal risks.

**1. Primary Data Requirements:**
* **Live Scores & Schedule:** Real-time updates (sub-minute latency).
* **Comprehensive Stats:** Detailed match events, team statistics (shots, possession, cards, fouls).
* **Betting Odds Feed:** Real-time odds from a minimum of 5 major bookmakers (e.g., 1xBet, Mozzart, Bet365, Pinnacle).
* **Historical Data:** Access to at least 5 years of H2H, match results, and team form.
* **Squad & Injury Data:** Must include up-to-date injury reports, player suspensions, and expected lineups.

**2. Advanced (Unique) Data Requirements:**
* **Expected Goals (xG) & Expected Assists (xA):** This data is crucial for generating the platform's unique, deep analysis.
* **Expected Points (xPTS):** For an advanced look at league standing performance.

**3. Action Item (Agent):**
* **Source and integrate a premium Sports Data API** that meets all the above requirements (e.g., Opta, Sportradar, The Odds API, etc.). Provide documentation for API integration and cost structure.

---
SECTION 2: BACKEND ARCHITECTURE & LOGIC
---

**1. Core Technology Stack (Suggested):**
* **Backend:** Python (Django/Flask) or Node.js (Express).
* **Database:** PostgreSQL (for relational data integrity) or MongoDB (for flexibility).

**2. Match Structure Logic (Crucial for Display ALL Games):**
* The backend MUST process and structure the data to display **ALL** scheduled games, correctly **grouped by league**.
    * **Endpoint Example:** `/api/v1/matches/upcoming` should return a nested object/array where the first level is grouped by `League Name` and the second level lists the individual matches.
    * **Example Structure:** `[{ "league_name": "Serie A", "matches": [...] }, { "league_name": "UCL", "matches": [...] }]`

**3. Proprietary Prediction Engine (The "More Detailed" Feature):**
* Develop custom algorithms that run daily to analyze **all** available games and generate automated predictions.
* **Required Models:**
    * **Match Result/Moneyline:** Uses H2H, Form, and xG to calculate Win/Draw/Loss percentages.
    * **Totals/Overs & Unders:** Uses team xG and defensive xG to predict final goal count ranges.
    * **Specialty Models:** Develop models for **Corner Predictions** (e.g., Team Over 5.5 Corners) and **Card/Booking Predictions**.
* **Output:** The engine must generate a clear, data-driven **RATIONALE** (supporting statistics) for every automated prediction.

**4. Editorial CMS:**
* Implement a simple Content Management System (CMS) for editors to input human-written content.
    * **Content:** "Editorial Prediction" text, deep analysis, and any unique match insights that supplement the automated data.

---
SECTION 3: FRONTEND & USER EXPERIENCE (UX)
---

**1. Technology Stack (Suggested):**
* **Frontend:** React, Vue, or a mobile-first framework like React Native/Flutter.
* **Design:** Must be modern, clean, and prioritizing **mobile-first** responsiveness.

**2. Main Page / Schedule View:**
* **League Demarcation:** The primary view must clearly display **ALL** upcoming games, separated by large, distinct **League Headers** (e.g., "Serie A," "Copa del Rey," etc.).
* **Prediction Summary:** Each match card should include a small indicator if a prediction is available and display the consensus or top tip.

**3. Detailed Match View (Tabbed Interface):**
* Implement a clear tab navigation bar for efficient data access.
* **Required Tabs & Content:**
    * **Overview:** Basic info, live score, top odds, referee.
    * **Prediction:** (The most important tab) Must display:
        * **Editorial Prediction** (text from CMS).
        * **Injury/Squad Report** (from data feed/CMS).
        * **Prediction Matrix:** A list of all automated predictions (Match Result, O/U, BTTS, Corners, etc.), each with **clear supporting statistics** (e.g., "9 of last 10 home games...").
    * **H2H:** Head-to-Head results, often split into 'ALL', 'Home/Away', and 'Away/Home'.
    * **Standings/Form:** Full league table and last 5-10 match results for both teams.
    * **Stats:** Deep dive into seasonal and recent team performance (xG, xA, possession, shots per game).
    * **Odds:** Full table of odds from all integrated bookmakers for various markets (Moneyline, Handicap, Totals).

---
SECTION 4: KEY DELIVERABLES
---

1.  Final selection and integration plan for the primary Sports Data API.
2.  Complete API documentation for the custom backend endpoints.
3.  Working prototype demonstrating the **league-demarcated match list** showing **all games**.
4.  Prototype of the **Prediction Tab** showing automated tips with supporting rationale and human-input editorial content.

==============================================================

Total Games Analyzed
1
Average Edge
2.4%
High Confidence (>80)
1
Football
2.4% EV
Juventus vs Dortmund
Premier League
Recommended Bet
Home -1.5
@ 1.90 (Multiple bookmakers)
Confidence
81
Win Probability
58.0%
Recommended Stake
0.50 Units
0.5% of bankroll
High Stability
View Details


Are these things correct 
Other sites have 79,80,90,65 % probabilities but what Iâ€™m seeing here surprises me 